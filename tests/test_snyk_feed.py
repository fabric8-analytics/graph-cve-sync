"""Test snyk_feed.py script."""

import pytest
import os
from unittest.mock import patch
from datetime import datetime

from snyk_feed import SnykDataFetcher
sdf = SnykDataFetcher()


class S3Obj:
    """S3 Obj class for testing."""
    text = "{\"a\": \"b\"}"


@patch.dict(os.environ, {'SNYK_INGESTION_RUN_TIME': '00'})
def test_disable_snyk_run():
    """Test disable_snyk_run."""
    val = sdf._disable_snyk_run(datetime(2020, 4, 4, 0, 1))
    assert val is False

    val = sdf._disable_snyk_run(datetime(2020, 2, 27, 8, 1))
    assert val is True

    sdf.DISABLE_SNYK_SYNC_OPERATION = True
    val = sdf._disable_snyk_run(datetime(2020, 4, 4, 0, 1))
    assert val is True


@patch('snyk_feed.Helper.force_run_ingestion')
def test_disable_snyk_run1(m1):
    """Test disable_snyk_run1."""
    m1.return_value = True
    sdf.DISABLE_SNYK_SYNC_OPERATION = False
    val = sdf._disable_snyk_run(datetime(2020, 2, 27, 12, 1))
    assert val is False


def test_validate():
    """Test validate."""
    pytest.raises(ValueError, sdf._validate)

    sdf.TOKEN = "a"
    sdf.URL = "b"
    sdf.ISS = "c"
    val = sdf._validate()
    assert val is True


@patch('snyk_feed.requests.get')
def test_fetch(m2):
    """Test fetch."""
    m2.return_value = S3Obj()
    val = sdf._fetch()
    assert val is True
    assert "a" in sdf.snyk_data


@patch('snyk_feed.SnykCveSync.run_snyk_sync')
def test_run_snyk_ingestion(m1):
    """Test run_snyk_ingestion."""
    m1.return_value = "Success"
    sdf.snyk_data = {"a": "b"}
    val = sdf._run_snyk_ingestion()
    assert val is "Success"


@patch('snyk_feed.SnykDataFetcher._run_snyk_ingestion')
@patch('snyk_feed.SnykDataFetcher._validate')
@patch('snyk_feed.SnykDataFetcher._store_data')
@patch('snyk_feed.SnykDataFetcher._disable_snyk_run')
@patch('snyk_feed.SnykDataFetcher._fetch')
def test_run_snyk_fetch(m1, m2, m3, m4, m5):
    """Test run_snyk_fetch."""
    m4.return_value = True
    m2.return_value = True
    res = sdf.run_snyk_fetch()
    assert res is None

    m5.return_value = ""
    m1.return_value = True
    m2.return_value = False
    m3.return_value = True
    res = sdf.run_snyk_fetch()
    assert res == "Success"
