"""Test graph_snyk_cve_sync.py script."""

import responses
from unittest.mock import patch
from datetime import datetime
import os
from f8a_version_comparator.comparable_version import ComparableVersion
from helper import Helper
from graph_snyk_cve_sync import SnykCveSync

data = {
    "ruby": [],
    "python": [
        {
            "creationTime": "2020-03-02T15:49:40.019112Z",
            "credit": [
                "Unknown"
            ],
            "cves": [
                "CVE-2020-1746"
            ],
            "cvssScore": 5.0,
            "cvssV3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N",
            "cwes": [
                "CWE-200"
            ],
            "description": "show_bug.cgi?id=1805491)\n",
            "premium": "false",
            "disclosureTime": "2020-02-28T00:00:00Z",
            "exploit": "Not Defined",
            "fixable": False,
            "functions_new": [],
            "id": "SNYK-PYTHON-ANSIBLE-559099",
            "initiallyFixedIn": [],
            "language": "python",
            "malicious": False,
            "modificationTime": "2020-07-04T15:54:07.317697Z",
            "package": "AnsiblE",
            "patchExists": False,
            "publicationTime": "2020-03-02T15:54:07.687840Z",
            "references": [
                {
                    "title": "GitHub PR",
                    "url": "https://github.com/ansible/ansible/pull/67866/files"
                },
                {
                    "title": "Redhat Bugzilla",
                    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1805491"
                }
            ],
            "registry": "https://pypi.org",
            "severity": "medium",
            "title": "Information Disclosure",
            "url": "https://snyk.io/vuln/SNYK-PYTHON-ANSIBLE-559099",
            "vulnerableVersions": [
                "[2.5.9 || 1.2]"
            ]
        },
        {
            "creationTime": "2020-03-02T15:49:40.019112Z",
            "description": "show_bug.cgi?id=1805491)\n",
            "disclosureTime": "2020-07-04T00:00:00Z",
            "exploit": "Not Defined",
            "fixable": False,
            "functions_new": [],
            "premium": "false",
            "id": "SNYK-PYTHON-ANSIBLE-559096",
            "initiallyFixedIn": [],
            "language": "python",
            "malicious": False,
            "modificationTime": "2020-07-02T15:54:07.317697Z",
            "package": "ansible",
            "patchExists": False,
            "registry": "https://pypi.org",
            "severity": "",
            "title": "Information Disclosure",
            "url": "https://snyk.io/vuln/SNYK-PYTHON-ANSIBLE-559099",
            "vulnerableVersions": []
        }],
    "java": [
        {
            "creationTime": "2020-03-02T10:29:31.222015Z",
            "credit": [
                "Unknown"
            ],
            "cves": [
                "CVE-2020-9546",
                "CVE-2020-9547",
                "CVE-2020-9548"
            ],
            "cvssScore": 9.8,
            "cvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
            "cwes": [
                "CWE-502"
            ],
            "description": "FasterXML/jackson-databind/issues/2631)\n",
            "premium": "false",
            "disclosureTime": "2020-03-02T05:18:36Z",
            "exploit": "Proof of Concept",
            "fixable": True,
            "functions_new": [],
            "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
            "initiallyFixedIn": [
                "2.9.10.4"
            ],
            "language": "java",
            "malicious": False,
            "modificationTime": "2020-07-03T14:10:33.180786Z",
            "package": "com.fasterxml.jackson.core:jackson-databind",
            "patchExists": False,
            "publicationTime": "2020-03-02T05:18:36Z",
            "references": [
                {
                    "title": "GitHub Issue #2",
                    "url": "https://github.com/FasterXML/jackson-databind/issues/2631"
                }
            ],
            "severity": "critical",
            "title": "Deserialization of Untrusted Data",
            "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
            "vulnerableVersions": [
                "[,2.9.10.4)"
            ]
        },
        {
            "creationTime": "2020-03-02T10:29:31.222015Z",
            "description": "FasterXML/jackson-databind/issues/2631)\n",
            "disclosureTime": "2020-03-02T05:18:36Z",
            "exploit": "Proof of Concept",
            "fixable": True,
            "premium": False,
            "functions_new": [],
            "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559095",
            "initiallyFixedIn": [
                "2.9.10.4"
            ],
            "language": "java",
            "malicious": False,
            "modificationTime": "2020-03-02T14:10:33.180786Z",
            "package": "com.fasterxml.jackson.core:jackson-databind",
            "patchExists": False,
            "severity": "critical",
            "title": "Deserialization of Untrusted Data",
            "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
            "vulnerableVersions": []
        },
        {
            "creationTime": "2020-03-02T10:29:31.222015Z",
            "description": "FasterXML/jackson-databind/issues/2631)\n",
            "disclosureTime": "2020-03-02T05:18:36Z",
            "exploit": "Proof of Concept",
            "fixable": True,
            "premium": False,
            "functions_new": [],
            "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559097",
            "initiallyFixedIn": [
                "2.9.10.4"
            ],
            "language": "java",
            "malicious": False,
            "modificationTime": "2020-03-02T14:10:33.180786Z",
            "package": "i.dont.care.about.my.name",
            "patchExists": False,
            "severity": "critical",
            "title": "Deserialization of Untrusted Data",
            "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
            "vulnerableVersions": ["2.0.1"]
        }

    ],
    "js": [
        {
            "creationTime": "2020-03-02T11:17:35.161853Z",
            "credit": [
                "Oscar Arnflo"
            ],
            "cves": [],
            "cvssScore": 6.3,
            "cvssV3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
            "cwes": [
                "CWE-29"
            ],
            "description": "## NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
            "disclosureTime": "2019-10-15T20:29:24Z",
            "exploit": "Proof of Concept",
            "fixable": False,
            "premium": "true",
            "functions_new": [],
            "id": "SNYK-JS-DECOMPRESSTAR-559095",
            "initiallyFixedIn": [],
            "language": "js",
            "malicious": False,
            "modificationTime": "2020-07-04T14:09:31.522355Z",
            "package": "decompress-tar",
            "patchExists": False,
            "publicationTime": "2020-02-27T13:28:41Z",
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/kevva/decompress/issues/71"
                }
            ],
            "severity": "medium",
            "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
            "url": "https://snyk.io/vuln/SNYK-JS-DECOMPRESSTAR-559095",
            "vulnerableVersions": [
                "2.0.2 || 4.1.0"
            ]
        },
        {
            "creationTime": "2020-03-02T11:17:35.161853Z",
            "credit": [
                "Oscar Arnflo"
            ],
            "cves": [],
            "cvssScore": 6.3,
            "cvssV3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
            "cwes": [
                "CWE-29"
            ],
            "description": "## NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
            "disclosureTime": "2019-10-15T20:29:24Z",
            "exploit": "Proof of Concept",
            "fixable": False,
            "premium": True,
            "functions_new": [],
            "id": "SNYK-JS-DECOMPRESSTAR-559096",
            "initiallyFixedIn": [],
            "language": "js",
            "malicious": False,
            "modificationTime": "2020-07-05T14:09:31.522355Z",
            "package": "decompress-tar",
            "patchExists": False,
            "publicationTime": "2020-02-27T13:28:41Z",
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/kevva/decompress/issues/71"
                }
            ],
            "severity": "medium",
            "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
            "url": "https://snyk.io/vuln/SNYK-JS-DECOMPRESSTAR-559095",
            "vulnerableVersions": [
                "*"
            ]
        },
        {
            "creationTime": "2020-03-02T11:17:35.161853Z",
            "credit": [
                "Oscar Arnflo"
            ],
            "cves": [],
            "cvssScore": 6.3,
            "cvssV3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
            "cwes": [
                "CWE-29"
            ],
            "description": "## NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
            "disclosureTime": "2019-10-15T20:29:24Z",
            "exploit": "Proof of Concept",
            "fixable": False,
            "premium": True,
            "functions_new": [],
            "id": "SNYK-JS-DECOMPRESSTAR-559097",
            "initiallyFixedIn": [],
            "language": "js",
            "malicious": False,
            "modificationTime": "2020-03-02T14:09:31.522355Z",
            "package": "decompress-tar",
            "patchExists": False,
            "publicationTime": "2020-02-27T13:28:41Z",
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/kevva/decompress/issues/71"
                }
            ],
            "severity": "medium",
            "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
            "url": "https://snyk.io/vuln/SNYK-JS-DECOMPRESSTAR-559095",
            "vulnerableVersions": [
                "2.0.2 || >=1.7 <=1.7.11"
            ]
        },
        {
            "creationTime": "2020-03-02T11:17:35.161853Z",
            "description": "## NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
            "disclosureTime": "2019-10-15T20:29:24Z",
            "exploit": "Proof of Concept",
            "fixable": False,
            "premium": True,
            "functions_new": [],
            "id": "SNYK-JS-DECOMPRESSTAR-559090",
            "initiallyFixedIn": [],
            "language": "js",
            "malicious": False,
            "modificationTime": "2020-03-02T14:09:31.522355Z",
            "package": "decompress-tar",
            "patchExists": False,
            "publicationTime": "2020-02-27T13:28:41Z",
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/kevva/decompress/issues/71"
                }
            ],
            "severity": "medium",
            "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
            "url": "https://snyk.io/vuln/SNYK-JS-DECOMPRESSTAR-559095",
            "vulnerableVersions": []
        }
    ],
    "golang": [
        {
            "description": "## Overview\n[go-g",
            "exploit": "Not Defined",
            "fixable": True,
            "id": "SNYK-GOLANG-GITHUBCOMGOGITEAGITEA-72635",
            "language": "golang",
            "malicious": False,
            "modificationTime": "2020-07-04T16:15:53.980730Z",
            "package": "github.com/go-gitea/gitea",
            "patchExists": False,
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/go-gitea/gitea/issues/5140"
                }
            ],
            "severity": "high",
            "title": "Remote Code Execution",
            "url": "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOGITEAGITEA-72635",
            "vulnerableHashes": [
                "cc3cbf8cbee4b28902abc7fccee60499bd4c1246",
                "685631627e5c4db881160bfc9b39dc45143989f6"
            ],
            "vulnerableVersions": [
                "<1.5.2"
            ]
        },
        {
            "description": "## Overview\n[go-g",
            "exploit": "Not Defined",
            "fixable": True,
            "id": "SNYK-GOLANG-GITHUBCOMGOGITEAGITEA-72636",
            "language": "golang",
            "malicious": False,
            "modificationTime": "2018-11-28T16:15:53.980730Z",
            "package": "github.com/go-gitea/gitea",
            "patchExists": False,
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/go-gitea/gitea/issues/5140"
                }
            ],
            "severity": "high",
            "title": "Remote Code Execution",
            "url": "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOGITEAGITEA-72635",
            "vulnerableHashes": [
                "cc3cbf8cbee4b28902abc7fccee60499bd4c1246",
                "685631627e5c4db881160bfc9b39dc45143989f6"
            ],
            "vulnerableVersions": []
        }
    ]
}

scs = SnykCveSync(data)
helper = Helper()


@patch("graph_snyk_cve_sync.SnykCveSync._parse_data_for_eco")
@patch("helper.Helper.is_delta_mode_on")
def test_extract_data_from_feed(m1, m2):
    """Test extract_data_from_feed."""
    m1.return_value = False
    m2.return_value = True
    scs._extract_data_from_feed()
    results = scs.CVE_DATA
    del_results = scs.DELETE_CVE_DATA

    """Tests to check the valid run of create and delete scenarios for all 4 ecosystems."""

    assert "pypi" in del_results
    assert "npm" in del_results
    assert "maven" in del_results
    assert "golang" in del_results

    assert len(del_results['pypi']) == 1
    assert len(del_results['maven']) == 1
    assert len(del_results['npm']) == 1
    assert len(del_results['golang']) == 1

    assert "pypi" in results
    assert "npm" in results
    assert "maven" in results
    assert "golang" in results

    assert "ansible" in results['pypi']
    assert "decompress-tar" in results['npm']
    assert "com.fasterxml.jackson.core:jackson-databind" in results['maven']
    assert "github.com/go-gitea/gitea" in results['golang']

    py_pkg_obj = results['pypi']['ansible']
    npm_pkg_obj = results['npm']['decompress-tar']
    mv_pkg_obj = results['maven']['com.fasterxml.jackson.core:jackson-databind']
    go_pkg_obj = results['golang']['github.com/go-gitea/gitea']

    assert py_pkg_obj['ecosystem'] == "pypi"
    assert npm_pkg_obj['ecosystem'] == "npm"
    assert mv_pkg_obj['ecosystem'] == "maven"
    assert go_pkg_obj['ecosystem'] == "golang"
    assert go_pkg_obj['gh_link']
    assert go_pkg_obj['license']

    assert py_pkg_obj['affected']
    assert npm_pkg_obj['affected']
    assert mv_pkg_obj['affected']

    assert py_pkg_obj['latest_version']
    assert npm_pkg_obj['latest_version']
    assert mv_pkg_obj['latest_version']

    py_vul = results['pypi']['ansible']['vulnerabilities'][0]
    npm_vul = results['npm']['decompress-tar']['vulnerabilities'][0]
    mv_vul = results['maven']['com.fasterxml.jackson.core:jackson-databind']['vulnerabilities'][0]

    assert py_vul['pvtVuln'] is False
    assert len(py_vul['affected']) == 2

    assert npm_vul['pvtVuln'] is True
    assert len(npm_vul['affected']) == 2
    assert len(npm_vul['cves']) == 0

    assert mv_vul['pvtVuln'] is False
    assert '2.3.0' in mv_vul['affected']

    report_data = scs.SNYK_REPORT['details']
    assert len(report_data['maven']['ingest']) == 1
    assert len(report_data['maven']['delete']) == 1
    assert len(report_data['maven']['pvt_pkgs']) == 1
    assert len(report_data['npm']['ingest']) == 3


@patch("helper.Helper.is_delta_mode_on")
def test_extract_data_from_feed1(m1):
    """Test extract_data_from_feed in delta mode."""
    m1.return_value = True
    scs.today = datetime.strptime("2020-07-05", '%Y-%m-%d')
    scs.start_day = datetime.strptime("2020-07-02", '%Y-%m-%d')
    scs._extract_data_from_feed()
    results = scs.CVE_DATA
    del_results = scs.DELETE_CVE_DATA
    delta_feed = scs.DELTA_FEED
    assert len(results) == 4
    assert len(results['maven']) == 1
    assert len(results['pypi']) == 1
    assert len(results['npm']) == 1
    assert len(results['golang']) == 1

    assert "pypi" in del_results
    assert "npm" in del_results
    assert "maven" in del_results

    assert len(del_results['pypi']) == 1
    assert len(del_results['maven']) == 0
    assert len(del_results['npm']) == 0

    assert "pypi" in delta_feed
    assert "npm" in delta_feed
    assert "maven" in delta_feed

    assert len(delta_feed['pypi']) == 2
    assert len(delta_feed['maven']) == 1
    assert len(delta_feed['npm']) == 1


@responses.activate
@patch('helper.Helper.is_dry_run')
def test_insert_cves(mocker):
    """Test insert_cves."""
    mocker.return_value = True
    scs.CVE_DATA = {
        "maven": {
            "abc": {
                "affected": ['1.1'],
                "vulnerabilities": [{
                    "a": "b"
                }],
                "all_ver": ['1.1', '1.2'],
                "latest_version": '1.2',
                "ecosystem": "maven",
                "package": 'abc'
            }
        },
        "pypi": {
            "xyz": {
                "affected": ['1.1'],
                "vulnerabilities": [{
                    "a": "b"
                }],
                "all_ver": ['1.1', '1.2'],
                "latest_version": '1.2',
                "ecosystem": "pypi",
                "package": 'xyz'
            }
        },
        "npm": {
            "pqr": {
                "affected": ['1.1'],
                "vulnerabilities": [{
                    "a": "b"
                }],
                "all_ver": ['1.1', '1.2'],
                "latest_version": '1.2',
                "ecosystem": "npm",
                "package": 'pqr'
            }
        }
    }
    val = scs._insert_cves()
    # Test insert CVEs in dry run mode.
    assert val is True


@responses.activate
@patch('helper.Helper.is_dry_run')
def test_delete_cves(mocker):
    """Test _delete_cves."""
    mocker.return_value = True
    scs.DELETE_CVE_DATA = {
        "pypi": [
            {
                "creationTime": "2020-03-02T15:49:40.019112Z",
                "description": "show_bug.cgi?id=1805491)\n",
                "disclosureTime": "2020-07-04T00:00:00Z",
                "exploit": "Not Defined",
                "fixable": False,
                "functions_new": [],
                "premium": "false",
                "id": "SNYK-PYTHON-ANSIBLE-559096",
                "initiallyFixedIn": [],
                "language": "python",
                "malicious": False,
                "modificationTime": "2020-07-04T15:54:07.317697Z",
                "package": "ansible",
                "patchExists": False,
                "registry": "https://pypi.org",
                "severity": "",
                "title": "Information Disclosure",
                "url": "https://snyk.io/vuln/SNYK-PYTHON-ANSIBLE-559099",
                "vulnerableVersions": []
            }
        ],
        "maven": [
            {
                "creationTime": "2020-03-02T10:29:31.222015Z",
                "description": "FasterXML/jackson-databind/issues/2631)\n",
                "disclosureTime": "2020-03-02T05:18:36Z",
                "exploit": "Proof of Concept",
                "fixable": True,
                "premium": False,
                "functions_new": [],
                "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559095",
                "initiallyFixedIn": [
                    "2.9.10.4"
                ],
                "language": "java",
                "malicious": False,
                "modificationTime": "2020-03-02T14:10:33.180786Z",
                "package": "com.fasterxml.jackson.core:jackson-databind",
                "patchExists": False,
                "severity": "critical",
                "title": "Deserialization of Untrusted Data",
                "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
                "vulnerableVersions": []
            }
        ],
        "npm": [
            {
                "creationTime": "2020-03-02T11:17:35.161853Z",
                "description": "## NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
                "disclosureTime": "2019-10-15T20:29:24Z",
                "exploit": "Proof of Concept",
                "fixable": False,
                "premium": True,
                "functions_new": [],
                "id": "SNYK-JS-DECOMPRESSTAR-559090",
                "initiallyFixedIn": [],
                "language": "js",
                "malicious": False,
                "modificationTime": "2020-03-02T14:09:31.522355Z",
                "package": "decompress-tar",
                "patchExists": False,
                "publicationTime": "2020-02-27T13:28:41Z",
                "references": [
                    {
                        "title": "GitHub Issue",
                        "url": "https://github.com/kevva/decompress/issues/71"
                    }
                ],
                "severity": "medium",
                "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
                "url": "https://snyk.io/vuln/SNYK-JS-DECOMPRESSTAR-559095",
                "vulnerableVersions": []
            }
        ]
    }
    val = scs._delete_cves()
    # Test delete CVEs in dry run mode.
    assert val is True


@responses.activate
@patch('graph_snyk_cve_sync.SnykCveSync._generate_snyk_report')
@patch('graph_snyk_cve_sync.SnykCveSync._delete_cves')
@patch('helper.Helper.store_json_content')
@patch('graph_snyk_cve_sync.SnykCveSync.disable_snyk_run')
@patch('helper.Helper.read_data_from_s3')
@patch('graph_snyk_cve_sync.SnykCveSync._extract_data_from_feed')
@patch('graph_snyk_cve_sync.SnykCveSync._insert_cves')
def test_run_snyk_sync(m1, m2, m3, m4, m5, m6, m7):
    """Test run_snyk_sync."""
    m4.return_value = False
    m5.return_value = True
    m6.return_value = True
    m7.return_value = True
    m3.return_value = {
        "a": "b"
    }
    m2.return_value = ""
    m1.return_value = ""

    val = scs.run_snyk_sync()
    assert val == "Success"

    m4.return_value = True
    val = scs.run_snyk_sync()
    assert val is None


@patch.dict(os.environ, {'SNYK_INGESTION_RUN_TIME': '18'})
def test_disable_snyk_run():
    """Test disable_snyk_run."""
    val = scs.disable_snyk_run(datetime(2020, 2, 27, 18, 1))
    assert val is False

    val = scs.disable_snyk_run(datetime(2020, 2, 27, 12, 1))
    assert val is True


@patch('helper.Helper.force_run_ingestion')
def test_disable_snyk_run1(m1):
    """Test disable_snyk_run1."""
    m1.return_value = True
    val = scs.disable_snyk_run(datetime(2020, 2, 27, 12, 1))
    assert val is False


@patch.dict(os.environ, {'SNYK_DRY_RUN': 'true'})
def test_is_dry_run():
    """Test is_dry_run."""
    val = helper.is_dry_run()
    assert val is True


@patch.dict(os.environ, {'SNYK_DRY_RUN': '0'})
def test_is_dry_run1():
    """Test is_dry_run."""
    val = helper.is_dry_run()
    assert val is False


@patch.dict(os.environ, {'SNYK_INGESTION_FORCE_RUN': 'true'})
def test_force_run_ingestion():
    """Test force_run_ingestion."""
    val = helper.force_run_ingestion()
    assert val is True


@patch.dict(os.environ, {'SNYK_INGESTION_FORCE_RUN': '0'})
def test_force_run_ingestion1():
    """Test force_run_ingestion."""
    val = helper.force_run_ingestion()
    assert val is False


@patch.dict(os.environ, {'SNYK_DELTA_FEED_MODE': 'true'})
def test_is_delta_mode_on():
    """Test is_delta_mode_on."""
    val = helper.is_delta_mode_on()
    assert val is True


@patch.dict(os.environ, {'SNYK_DELTA_FEED_MODE': '0'})
def test_is_delta_mode_on1():
    """Test is_delta_mode_on."""
    val = helper.is_delta_mode_on()
    assert val is False


@patch('helper.Helper.is_delta_mode_on')
def test_parse_data_for_eco(m1):
    """Test parse_data_for_eco."""
    # Delta mode is on, so run for all ecosystems
    m1.return_value = True
    val = scs._parse_data_for_eco("js")
    assert val is True

    # Delta mode is off, but selective eco is java, so run for java ecosystems
    m1.return_value = False
    scs.selective_eco_run = "java"
    val = scs._parse_data_for_eco("java")
    assert val is True

    # Delta mode is off, but selective eco is java, so dont run for npm ecosystems
    scs.day = datetime(2020, 5, 9, 12, 1).weekday()
    val = scs._parse_data_for_eco("js")
    assert val is False

    # Delta mode is off, run for npm on saturday
    m1.return_value = False
    scs.selective_eco_run = "none"
    scs.day = datetime(2020, 5, 9, 12, 1).weekday()
    val = scs._parse_data_for_eco("js")
    assert val is True

    # Delta mode is off, dont run for npm on friday
    m1.return_value = False
    scs.day = datetime(2020, 5, 8, 12, 1).weekday()
    val = scs._parse_data_for_eco("js")
    assert val is False

    # Dont run for non supported ecosystem
    val = scs._parse_data_for_eco("ruby")
    assert val is False


def test_is_relation_applicable():
    """Test is_relation_applicable."""
    # Test lt operator
    res = scs._is_relation_applicable('<', '1.2', ComparableVersion('1.4'))
    assert res is True
    res = scs._is_relation_applicable('<', '1.4', ComparableVersion('1.4'))
    assert res is False

    # Test gt operator
    res = scs._is_relation_applicable('>', '1.4', ComparableVersion('1.4'))
    assert res is False
    res = scs._is_relation_applicable('>', '1.5', ComparableVersion('1.4'))
    assert res is True

    # Test gte operator
    res = scs._is_relation_applicable('>=', '1.4', ComparableVersion('1.4'))
    assert res is True
    # Test lte operator
    res = scs._is_relation_applicable('<=', '1.4', ComparableVersion('1.4'))
    assert res is True

    # Test eq operator
    res = scs._is_relation_applicable('=', '1.4', ComparableVersion('1.4'))
    assert res is True
    # Test universal operator
    res = scs._is_relation_applicable('*', '1.9', ComparableVersion(''))
    assert res is True


def test_generate_snyk_report():
    """Test _generate_snyk_report."""
    scs.SNYK_REPORT = {
        "stats": {
            "maven": {
                "premium_count": 0,
                "pvt_pkg_vulnerability_count": 0
            },
            "pypi": {
                "premium_count": 0,
                "pvt_pkg_vulnerability_count": 0
            },
            "npm": {
                "premium_count": 0,
                "pvt_pkg_vulnerability_count": 0
            },
            "golang": {
                "premium_count": 0,
                "pvt_pkg_vulnerability_count": 0
            }
        },
        "details": {
            "maven": {
                "ingest": {
                    "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094": {
                        "name": "com.fasterxml.jackson.core:jackson-databind",
                        "premium": False,
                        "affected_version_count": 126,
                        "status": "success"
                    },
                    "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559095": {
                        "name": "com.fasterxml.jackson.core:jackson-databind",
                        "premium": True,
                        "affected_version_count": 10,
                        "status": "success"
                    },
                    "SNYK-JAVA-SOMERANDOM-559095": {
                        "name": "com.somerandom",
                        "premium": True,
                        "affected_version_count": 10,
                        "status": "failed"
                    }
                },
                "delete": {
                    "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559095": {
                        "name": "com.fasterxml.jackson.core:jackson-databind",
                        "status": "success"
                    }
                },
                "pvt_pkgs": {
                    "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559097":{
                        "name": "i.dont.care.about.my.name"
                    }
                }
            },
            "pypi": {
                "ingest": {
                },
                "delete": {
                },
                "pvt_pkgs": {
                }
            },
            "npm": {
                "ingest": {
                    "SNYK-JS-DECOMPRESSTAR-559095": {
                        "name": "decompress-tar",
                        "premium": True,
                        "affected_version_count": 2,
                        "status": "success"
                    }
                },
                "delete": {
                    "SNYK-JS-DECOMPRESSTAR-559090": {
                        "name": "decompress-tar",
                        "status": "success"
                    }
                },
                "pvt_pkgs": {
                }
            },
            "golang": {
                "ingest": {
                    "SNYK-Golang-DECOMPRESSTAR-559095": {
                        "name": "gopkg1",
                        "premium": True,
                        "affected_version_count": 2,
                        "status": "success"
                    },
                    "SNYK-Golang-DECOMPRESSTAR-559096": {
                        "name": "gopkg2",
                        "premium": True,
                        "affected_version_count": 3,
                        "status": "success"
                    }
                },
                "delete": {
                    "SNYK-Golang-DECOMPRESSTAR-559090": {
                        "name": "gopkg4",
                        "status": "success"
                    }
                },
                "pvt_pkgs": {
                }
            }
        }
    }
    scs._generate_snyk_report()
    stats = scs.SNYK_REPORT['stats']
    # check report details for maven
    assert stats['maven']['successfully_ingested'] == 2
    assert stats['maven']['ingestion_accuracy'] == "66.67%"
    assert stats['maven']['successfully_deleted'] == 1
    assert stats['maven']['deletion_accuracy'] == "100.0%"
    assert stats['maven']['packages_affected'] == 2
    assert stats['maven']['versions_affected'] == 146
    assert stats['maven']['premium_count'] == 2
    assert stats['maven']['pvt_pkg_vulnerability_count'] == 1

    # check report details for python
    assert stats['pypi']['ingestion_accuracy'] == "NA"
    assert stats['pypi']['deletion_accuracy'] == "NA"

    # check report details for npm
    assert stats['npm']['ingestion_accuracy'] == "100.0%"
    assert stats['npm']['deletion_accuracy'] == "100.0%"

    # check report details for golang
    assert stats['golang']['ingestion_accuracy'] == "100.0%"
    assert stats['golang']['deletion_accuracy'] == "100.0%"
    # assert stats['golang']['commit_hash_affected'] == 30
    assert stats['golang']['versions_affected'] == 5
