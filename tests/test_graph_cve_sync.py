"""Test graph_cve_sync.py script."""

import os
import responses
import json
from unittest.mock import patch

from graph_cve_sync import (
    GraphDatabase, delete_superfluous_cves_from_graph, perform_full_sync, perform_diff_sync,
    get_ecosystem_vulnerabilities, is_full_sync, Git, set_version, is_dry_run
)
from victimsdb_lib import VictimsDB


TEST_DIR = os.path.dirname(__file__)
DATABASE_PATH = os.path.join(TEST_DIR, 'database/')


@responses.activate
def test_delete_superfluous_cves_from_graph():
    """Test deleting superfluous CVEs."""

    def request_callback(request):
        assert json.loads(request.body) == {'cve_id': 'CVE-0000-0000'}
        return 200, {}, json.dumps({})

    responses.add(
        responses.GET,
        'http://localhost:9192/api/v1/cves/pypi',
        json={'count': '3', 'cve_ids': ['CVE-2018-1000164', 'CVE-2018-1000518', 'CVE-0000-0000']},
        status=200
    )

    responses.add_callback(
        responses.DELETE,
        'http://localhost:9192/api/v1/cves',
        callback=request_callback
    )

    cve_db = VictimsDB.from_dir(DATABASE_PATH)
    graph_db = GraphDatabase(host='localhost', port='9192')

    delete_superfluous_cves_from_graph(cve_db, graph_db, 'python')

    assert len(responses.calls) == 2


@responses.activate
@patch('graph_cve_sync.get_versions_for_ep')
def test_perform_full_sync(mocker):
    """Test full sync."""
    mocker.return_value = ['1', '19.4.5']

    cve_db = VictimsDB.from_dir(DATABASE_PATH)
    graph_db = GraphDatabase(host='localhost', port='9192')

    responses.add(
        responses.PUT,
        'http://localhost:9192/api/v1/cves',
        json={},
        status=200
    )

    perform_full_sync(cve_db, graph_db, 'python')

    assert len(responses.calls) == len(cve_db)


@responses.activate
@patch('graph_cve_sync.get_versions_for_ep')
def test_perform_diff_sync(mocker):
    """Test diff sync."""
    mocker.return_value = ['1', '19.4.5']

    cve_db = VictimsDB.from_dir(DATABASE_PATH)
    graph_db = GraphDatabase(host='localhost', port='9192')

    responses.add(
        responses.PUT,
        'http://localhost:9192/api/v1/cves',
        json={},
        status=200
    )

    perform_diff_sync(cve_db, graph_db, ['CVE-2018-1000518'], 'python')

    assert len(responses.calls) == 1  # one CVE has been modified since last sync
    assert len(cve_db) == 2


def test_get_ecosystem_vulnerabilities():
    """Test get_ecosystem_vulnerabilities()."""
    cve_db = VictimsDB.from_dir(DATABASE_PATH)
    assert len(get_ecosystem_vulnerabilities(cve_db, 'python')) == 2
    assert len(get_ecosystem_vulnerabilities(cve_db, 'java')) == 0


@responses.activate
def test_is_full_sync():
    """Test is_full_sync()."""
    graph_db = GraphDatabase(host='localhost', port='9192')

    responses.add(
        responses.GET,
        'http://localhost:9192/api/v1/cvedb-version',
        json={'version': None},
        status=200
    )
    assert is_full_sync(graph_db)


def test_is_dry_run():
    """Test is_dry_run()."""
    assert not is_dry_run()


def test_git_utils():
    """Test Git utilities."""
    git = Git('url', destination=os.getcwd())

    last_hash = git.get_last_hash()
    assert last_hash
    diff = git.get_diff_since(last_hash, 'python')
    assert not diff


@responses.activate
def test_set_version():
    """Test set_version()."""
    graph_db = GraphDatabase(host='localhost', port='9192')

    def request_callback(request):
        assert json.loads(request.body) == {'version': 'aaaa;bbbb'}
        return 200, {}, json.dumps({'version': 'aaaa;bbbb'})

    responses.add_callback(
        responses.PUT,
        'http://localhost:9192/api/v1/cvedb-version',
        content_type='application/json',
        callback=request_callback,
    )
    set_version('aaaa', 'bbbb', graph_db)

    assert len(responses.calls) == 1

    responses.add(
        responses.PUT,
        'http://localhost:9192/api/v1/cvedb-version',
        content_type='application/json',
        status=500
    )

    # no exception
    set_version('aaaa', 'fail', graph_db)
