"""Test vulnerability_metadata.py script."""

from vulnerability_metadata import Vulnerability
from helper import Helper
from unittest.mock import patch

cve_data = {
    "maven": {
        "pkg1": {
            "vulnerabilities": [
                {
                    "id": "1111",
                    "affected": ['1.1', '1.2'],
                    "initiallyFixedIn": ['1.4'],
                    "title": "some title",
                    "url": "some_url.com",
                    "severity": "low"

                }
            ]
        }
    },
    "golang": {
        "pkg2": {
            "vulnerabilities": [
                {
                    "id": "2222",
                    "affected": ['1.1', '1.2'],
                    "initiallyFixedIn": ['1.4'],
                    "title": "some title",
                    "url": "some_url.com",
                    "severity": "low"

                }
            ]
        }
    },
    "npm": {
        "pkg3": {
            "vulnerabilities": [
                {
                    "id": "3333",
                    "affected": ['1.1'],
                    "initiallyFixedIn": ['1.4'],
                    "title": "some title",
                    "url": "some_url.com",
                    "severity": "low"

                }
            ]
        }
    },
    "pypi": {
        "pkg4": {
            "vulnerabilities": [
                {
                    "id": "4444",
                    "affected": ['1.1', '1.2', '1.3'],
                    "initiallyFixedIn": ['1.4'],
                    "title": "some title",
                    "url": "some_url.com",
                    "severity": "low"

                }
            ]
        }
    }
}

vulobj = Vulnerability()
helper = Helper()


def test_extract_info():
    """Test test_extract_info."""
    json_data = {
        "pypi": {},
        "maven": {},
        "npm": {},
        "golang": {}
    }

    vuln_info = vulobj.extract_info(cve_data, json_data)
    assert vuln_info['pypi']['pkg4']['4444']['vulnerable_versions'] == "1.1,1.2,1.3"
    assert vuln_info['npm']['pkg3']['3333']['package_name'] == "pkg3"
    assert len(vuln_info['npm']['pkg3']['3333']['fixed_in']) == 1
    assert vuln_info['golang']['pkg2']['2222']['title'] == "some title"
    assert vuln_info['maven']['pkg1']['1111']['url'] == "some_url.com"


@patch("helper.Helper.is_complete_vuln_mode")
def test_extract_data_from_feed1(m1):
    """Test extract_data_from_feed in delta mode."""
    m1.return_value = True
    data = vulobj.get_vuln_data()
    assert not data['pypi']
    assert not data['golang']
    assert not data['maven']
    assert not data['npm']
